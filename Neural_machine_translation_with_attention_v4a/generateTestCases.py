{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e891cb5-9782-4b2c-855b-bc0855f1fd10",
   "metadata": {},
   "outputs": [],
   "source": [
    "# New Generate Test Cases \n",
    "import numpy as np \n",
    "import math \n",
    "import os,sys\n",
    "from testCase import get_testCase\n",
    "# import copy \n",
    "# from keras.callbacks import History \n",
    "# import tensorflow as tf\n",
    "sys.path.append('../')\n",
    "sys.path.append('../../')\n",
    "\n",
    "from grader_support import stdout_redirector\n",
    "from grader_support import util\n",
    "\n",
    "os.environ['TF_CPP_MIN_LOG_LEVEL']='3'\n",
    "\n",
    "# This grader is for the Emojify assignment\n",
    "\n",
    "mFiles = [\n",
    "    \"one_step_attention.py\",\n",
    "    \"model.py\"\n",
    "]\n",
    "class suppress_stdout_stderr(object):\n",
    "    '''\n",
    "    A context manager for doing a \"deep suppression\" of stdout and stderr in \n",
    "    Python, i.e. will suppress all print, even if the print originates in a \n",
    "    compiled C/Fortran sub-function.\n",
    "       This will not suppress raised exceptions, since exceptions are printed\n",
    "    to stderr just before a script exits, and after the context manager has\n",
    "    exited (at least, I think that is why it lets exceptions through).      \n",
    "\n",
    "    '''\n",
    "    def __init__(self):\n",
    "        # Open a pair of null files\n",
    "        self.null_fds =  [os.open(os.devnull,os.O_RDWR) for x in range(2)]\n",
    "        # Save the actual stdout (1) and stderr (2) file descriptors.\n",
    "        self.save_fds = [os.dup(1), os.dup(2)]\n",
    "\n",
    "    def __enter__(self):\n",
    "        # Assign the null pointers to stdout and stderr.\n",
    "        os.dup2(self.null_fds[0],1)\n",
    "        os.dup2(self.null_fds[1],2)\n",
    "\n",
    "    def __exit__(self, *_):\n",
    "        # Re-assign the real stdout/stderr back to (1) and (2)\n",
    "        os.dup2(self.save_fds[0],1)\n",
    "        os.dup2(self.save_fds[1],2)\n",
    "        # Close all file descriptors\n",
    "        for fd in self.null_fds + self.save_fds:\n",
    "            os.close(fd)\n",
    "np.random.seed(3)\n",
    "with suppress_stdout_stderr():\n",
    "    from solutions import *\n",
    "    from testCase import get_testCase\n",
    "    n_a = 64\n",
    "    n_s = 128\n",
    "    m = 10\n",
    "    dataset, human_vocab, machine_vocab, inv_machine_vocab = load_dataset(m)\n",
    "\n",
    "    human_vocab_size = len(human_vocab)\n",
    "    machine_vocab_size = len(machine_vocab)\n",
    "\n",
    "    im = model(Tx, Ty, n_a, n_s, human_vocab_size, machine_vocab_size)\n",
    "    cp1 = im.count_params()\n",
    "    mi1 = len(im.inputs)\n",
    "    mo1 = len(im.outputs)\n",
    "    ml1 = len(im.layers)\n",
    "    m_out1 = np.asarray((cp1, mi1, mo1, ml1))\n",
    "\n",
    "\n",
    "    # GRADED FUNCTION: one_step_attention\n",
    "\n",
    "    m_out2 = get_testCase()\n",
    "\n",
    "def generateTestCases():\n",
    "\ttestCases = {\n",
    "\t    'one_step_attention': {\n",
    "\t        'partId': 'zcQIs',\n",
    "\t        'testCases': [\n",
    "\t            {\n",
    "\t                'testInput': 0,\n",
    "\t                'testOutput': m_out2\n",
    "\t            }\n",
    "\t        ]\n",
    "\t    },\n",
    "\t    'model': { \n",
    "\t        'partId': 'PTKef',\n",
    "\t        'testCases': [\n",
    "\t            {\n",
    "\t                'testInput': (Tx, Ty, n_a, n_s, human_vocab_size, machine_vocab_size),\n",
    "\t                'testOutput': m_out1\n",
    "\t            }\n",
    "\t        ]\n",
    "\t    }\n",
    "       }\n",
    "\treturn testCases\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
