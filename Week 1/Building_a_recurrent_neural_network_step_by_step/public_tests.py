{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2517a7f9-312d-4e33-98ad-efe380026bd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from rnn_utils import *\n",
    "\n",
    "def rnn_cell_forward_tests(target):\n",
    "    # Only bias in expression\n",
    "    a_prev_tmp = np.zeros((5, 10))\n",
    "    xt_tmp = np.zeros((3, 10))\n",
    "    parameters_tmp = {}\n",
    "    parameters_tmp['Waa'] = np.random.randn(5, 5)\n",
    "    parameters_tmp['Wax'] = np.random.randn(5, 3)\n",
    "    parameters_tmp['Wya'] = np.random.randn(2, 5)\n",
    "    parameters_tmp['ba'] = np.random.randn(5, 1)\n",
    "    parameters_tmp['by'] = np.random.randn(2, 1)\n",
    "    parameters_tmp['Wya'] = np.zeros((2, 5))\n",
    "\n",
    "    a_next_tmp, yt_pred_tmp, cache_tmp = target(xt_tmp, a_prev_tmp, parameters_tmp)\n",
    "    \n",
    "    assert a_next_tmp.shape == (5, 10), f\"Wrong shape for a_next. Expected (5, 10) != {a_next_tmp.shape}\"\n",
    "    assert yt_pred_tmp.shape == (2, 10), f\"Wrong shape for yt_pred. Expected (2, 10) != {yt_pred_tmp.shape}\"\n",
    "    assert cache_tmp[0].shape == (5, 10), \"Wrong shape in cache->a_next\"\n",
    "    assert cache_tmp[1].shape == (5, 10), \"Wrong shape in cache->a_prev\"\n",
    "    assert cache_tmp[2].shape == (3, 10), \"Wrong shape in cache->x_t\"\n",
    "    assert len(cache_tmp[3].keys()) == 5, \"Wrong number of parameters in cache. Expected 5\"\n",
    "    \n",
    "    assert np.allclose(np.tanh(parameters_tmp['ba']), a_next_tmp), \"Problem 1 in a_next expression. Related to ba?\"\n",
    "    assert np.allclose(softmax(parameters_tmp['by']), yt_pred_tmp), \"Problem 1 in yt_pred expression. Related to by?\"\n",
    "\n",
    "    # Only xt in expression\n",
    "    a_prev_tmp = np.zeros((5,10))\n",
    "    xt_tmp = np.random.randn(3,10)\n",
    "    parameters_tmp['Wax'] = np.random.randn(5,3)\n",
    "    parameters_tmp['ba'] = np.zeros((5,1))\n",
    "    parameters_tmp['by'] = np.zeros((2,1))\n",
    "\n",
    "    a_next_tmp, yt_pred_tmp, cache_tmp = target(xt_tmp, a_prev_tmp, parameters_tmp)\n",
    "\n",
    "    assert np.allclose(np.tanh(np.dot(parameters_tmp['Wax'], xt_tmp)), a_next_tmp), \"Problem 2 in a_next expression. Related to xt?\"\n",
    "    assert np.allclose(softmax(np.dot(parameters_tmp['Wya'], a_next_tmp)), yt_pred_tmp), \"Problem 2 in yt_pred expression. Related to a_next?\"\n",
    "\n",
    "    # Only a_prev in expression\n",
    "    a_prev_tmp = np.random.randn(5,10)\n",
    "    xt_tmp = np.zeros((3,10))\n",
    "    parameters_tmp['Waa'] = np.random.randn(5,5)\n",
    "    parameters_tmp['ba'] = np.zeros((5,1))\n",
    "    parameters_tmp['by'] = np.zeros((2,1))\n",
    "\n",
    "    a_next_tmp, yt_pred_tmp, cache_tmp = target(xt_tmp, a_prev_tmp, parameters_tmp)\n",
    "\n",
    "    assert np.allclose(np.tanh(np.dot(parameters_tmp['Waa'], a_prev_tmp)), a_next_tmp), \"Problem 3 in a_next expression. Related to a_prev?\"\n",
    "    assert np.allclose(softmax(np.dot(parameters_tmp['Wya'], a_next_tmp)), yt_pred_tmp), \"Problem 3 in yt_pred expression. Related to a_next?\"\n",
    "\n",
    "    print(\"\\033[92mAll tests passed\")\n",
    "    \n",
    "\n",
    "def rnn_forward_test(target):\n",
    "    np.random.seed(17)\n",
    "    T_x = 13\n",
    "    m = 8\n",
    "    n_x = 4\n",
    "    n_a = 7\n",
    "    n_y = 3\n",
    "    x_tmp = np.random.randn(n_x, m, T_x)\n",
    "    a0_tmp = np.random.randn(n_a, m)\n",
    "    parameters_tmp = {}\n",
    "    parameters_tmp['Waa'] = np.random.randn(n_a, n_a)\n",
    "    parameters_tmp['Wax'] = np.random.randn(n_a, n_x)\n",
    "    parameters_tmp['Wya'] = np.random.randn(n_y, n_a)\n",
    "    parameters_tmp['ba'] = np.random.randn(n_a, 1)\n",
    "    parameters_tmp['by'] = np.random.randn(n_y, 1)\n",
    "\n",
    "    a, y_pred, caches = target(x_tmp, a0_tmp, parameters_tmp)\n",
    "    \n",
    "    assert a.shape == (n_a, m, T_x), f\"Wrong shape for a. Expected: ({n_a, m, T_x}) != {a.shape}\"\n",
    "    assert y_pred.shape == (n_y, m, T_x), f\"Wrong shape for y_pred. Expected: ({n_y, m, T_x}) != {y_pred.shape}\"\n",
    "    assert len(caches[0]) == T_x, f\"len(cache) must be T_x = {T_x}\"\n",
    "    \n",
    "    assert np.allclose(a[5, 2, 2:6], [0.99999291, 0.99332189, 0.9921928, 0.99503445]), \"Wrong values for a\"\n",
    "    assert np.allclose(y_pred[2, 1, 1: 5], [0.19428, 0.14292, 0.24993, 0.00119], atol=1e-4), \"Wrong values for y_pred\"\n",
    "    assert np.allclose(caches[1], x_tmp), f\"Fail check: cache[1] != x_tmp\"\n",
    "\n",
    "    \n",
    "    print(\"\\033[92mAll tests passed\")\n",
    "    \n",
    "def lstm_cell_forward_test(target):\n",
    "    np.random.seed(212)\n",
    "    m = 8\n",
    "    n_x = 4\n",
    "    n_a = 7\n",
    "    n_y = 3\n",
    "    x = np.random.randn(n_x, m)\n",
    "    a0 = np.random.randn(n_a, m)\n",
    "    c0 = np.random.randn(n_a, m)\n",
    "    params = {}\n",
    "    params['Wf'] = np.random.randn(n_a, n_a + n_x)\n",
    "    params['bf'] = np.random.randn(n_a, 1)\n",
    "    params['Wi'] = np.random.randn(n_a, n_a + n_x)\n",
    "    params['bi'] = np.random.randn(n_a, 1)\n",
    "    params['Wo'] = np.random.randn(n_a, n_a + n_x)\n",
    "    params['bo'] = np.random.randn(n_a, 1)\n",
    "    params['Wc'] = np.random.randn(n_a, n_a + n_x)\n",
    "    params['bc'] = np.random.randn(n_a, 1)\n",
    "    params['Wy'] = np.random.randn(n_y, n_a)\n",
    "    params['by'] = np.random.randn(n_y, 1)\n",
    "    a_next, c_next, y_pred, cache = target(x, a0, c0, params)\n",
    "    \n",
    "    assert len(cache) == 10, \"Don't change the cache\"\n",
    "    \n",
    "    assert cache[4].shape == (n_a, m), f\"Wrong shape for cache[4](ft). {cache[4].shape} != {(n_a, m)}\"\n",
    "    assert cache[5].shape == (n_a, m), f\"Wrong shape for cache[5](it). {cache[5].shape} != {(n_a, m)}\"\n",
    "    assert cache[6].shape == (n_a, m), f\"Wrong shape for cache[6](cct). {cache[6].shape} != {(n_a, m)}\"\n",
    "    assert cache[1].shape == (n_a, m), f\"Wrong shape for cache[1](c_next). {cache[1].shape} != {(n_a, m)}\"\n",
    "    assert cache[7].shape == (n_a, m), f\"Wrong shape for cache[7](ot). {cache[7].shape} != {(n_a, m)}\"\n",
    "    assert cache[0].shape == (n_a, m), f\"Wrong shape for cache[0](a_next). {cache[0].shape} != {(n_a, m)}\"\n",
    "    assert cache[8].shape == (n_x, m), f\"Wrong shape for cache[8](xt). {cache[8].shape} != {(n_x, m)}\"\n",
    "    assert cache[2].shape == (n_a, m), f\"Wrong shape for cache[2](a_prev). {cache[2].shape} != {(n_a, m)}\"\n",
    "    assert cache[3].shape == (n_a, m), f\"Wrong shape for cache[3](c_prev). {cache[3].shape} != {(n_a, m)}\"\n",
    "    \n",
    "    assert a_next.shape == (n_a, m), f\"Wrong shape for a_next. {a_next.shape} != {(n_a, m)}\"\n",
    "    assert c_next.shape == (n_a, m), f\"Wrong shape for c_next. {c_next.shape} != {(n_a, m)}\"\n",
    "    assert y_pred.shape == (n_y, m), f\"Wrong shape for y_pred. {y_pred.shape} != {(n_y, m)}\"\n",
    "\n",
    "    \n",
    "    assert np.allclose(cache[4][0, 0:2], [0.32969833, 0.0574555]), \"wrong values for ft\"\n",
    "    assert np.allclose(cache[5][0, 0:2], [0.0036446, 0.9806943]), \"wrong values for it\"\n",
    "    assert np.allclose(cache[6][0, 0:2], [0.99903873, 0.57509956]), \"wrong values for cct\"\n",
    "    assert np.allclose(cache[1][0, 0:2], [0.1352798,  0.39884899]), \"wrong values for c_next\"\n",
    "    assert np.allclose(cache[7][0, 0:2], [0.7477249,  0.71588751]), \"wrong values for ot\"\n",
    "    assert np.allclose(cache[0][0, 0:2], [0.10053951, 0.27129536]), \"wrong values for a_next\"\n",
    "    \n",
    "    assert np.allclose(y_pred[1], [0.417098, 0.449528, 0.223159, 0.278376,\n",
    "                                   0.68453,  0.419221, 0.564025, 0.538475]), \"Wrong values for y_pred\"\n",
    "    \n",
    "    print(\"\\033[92mAll tests passed\")\n",
    "    \n",
    "def lstm_forward_test(target):\n",
    "    np.random.seed(45)\n",
    "    n_x = 4\n",
    "    m = 13\n",
    "    T_x = 16\n",
    "    n_a = 3\n",
    "    n_y = 2\n",
    "    x_tmp = np.random.randn(n_x, m, T_x)\n",
    "    a0_tmp = np.random.randn(n_a, m)\n",
    "    parameters_tmp = {}\n",
    "    parameters_tmp['Wf'] = np.random.randn(n_a, n_a + n_x)\n",
    "    parameters_tmp['bf'] = np.random.randn(n_a, 1)\n",
    "    parameters_tmp['Wi'] = np.random.randn(n_a, n_a + n_x)\n",
    "    parameters_tmp['bi']= np.random.randn(n_a, 1)\n",
    "    parameters_tmp['Wo'] = np.random.randn(n_a, n_a + n_x)\n",
    "    parameters_tmp['bo'] = np.random.randn(n_a, 1)\n",
    "    parameters_tmp['Wc'] = np.random.randn(n_a, n_a + n_x)\n",
    "    parameters_tmp['bc'] = np.random.randn(n_a, 1)\n",
    "    parameters_tmp['Wy'] = np.random.randn(n_y, n_a)\n",
    "    parameters_tmp['by'] = np.random.randn(n_y, 1)\n",
    "\n",
    "    a, y, c, caches = target(x_tmp, a0_tmp, parameters_tmp)\n",
    "    \n",
    "    assert a.shape == (n_a, m, T_x), f\"Wrong shape for a. {a.shape} != {(n_a, m, T_x)}\"\n",
    "    assert c.shape == (n_a, m, T_x), f\"Wrong shape for c. {c.shape} != {(n_a, m, T_x)}\"\n",
    "    assert y.shape == (n_y, m, T_x), f\"Wrong shape for y. {y.shape} != {(n_y, m, T_x)}\"\n",
    "    assert len(caches[0]) == T_x, f\"Wrong shape for caches. {len(caches[0])} != {T_x} \"\n",
    "    assert len(caches[0][0]) == 10, f\"length of caches[0][0] must be 10.\"\n",
    "    \n",
    "    assert np.allclose(a[2, 1, 4:6], [-0.01606022,  0.0243569]), \"Wrong values for a\"\n",
    "    assert np.allclose(c[2, 1, 4:6], [-0.02753855,  0.05668358]), \"Wrong values for c\"\n",
    "    assert np.allclose(y[1, 1, 4:6], [0.70444592 ,0.70648935]), \"Wrong values for y\"\n",
    "    \n",
    "    print(\"\\033[92mAll tests passed\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
