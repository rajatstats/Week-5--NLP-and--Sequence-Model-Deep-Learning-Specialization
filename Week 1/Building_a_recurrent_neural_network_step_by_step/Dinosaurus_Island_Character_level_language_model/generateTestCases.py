{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46975e5a-bd81-4ad8-9098-5aada29e1d18",
   "metadata": {},
   "outputs": [],
   "source": [
    "# New Generate Test Cases \n",
    "from solutions import *\n",
    "import numpy as np \n",
    "import math \n",
    "import os,sys\n",
    "import copy \n",
    "from random import shuffle\n",
    "# import tensorflow as tf\n",
    "sys.path.append('../')\n",
    "sys.path.append('../../')\n",
    "\n",
    "from grader_support import stdout_redirector\n",
    "from grader_support import util\n",
    "\n",
    "\n",
    "mFiles = [\n",
    "    \"clip.py\",\n",
    "    \"sample.py\",\n",
    "    \"optimize.py\",\n",
    "    \"model.py\"\n",
    "]\n",
    "\n",
    "\n",
    "data = open('dinos.txt', 'r').read()\n",
    "data= data.lower()\n",
    "chars = list(set(data))\n",
    "data_size, vocab_size = len(data), len(chars)\n",
    "char_to_ix = { ch:i for i,ch in enumerate(sorted(chars)) }\n",
    "ix_to_char = { i:ch for i,ch in enumerate(sorted(chars)) }\n",
    "\n",
    "\n",
    "# set the seed to be able to replicate the same results. \n",
    "np.random.seed(3)\n",
    "\n",
    "dWax = np.random.randn(5,3)*10\n",
    "dWaa = np.random.randn(5,5)*10\n",
    "dWya = np.random.randn(2,5)*10\n",
    "db = np.random.randn(5,1)*10\n",
    "dby = np.random.randn(2,1)*10\n",
    "gradients = {\"dWax\": dWax, \"dWaa\": dWaa, \"dWya\": dWya, \"db\": db, \"dby\": dby}\n",
    "gradients1 = copy.deepcopy(gradients)\n",
    "gradients = clip(gradients, 10)\n",
    "\n",
    "# generating test cases for sampling function\n",
    "vocab_size = 27\n",
    "n = 23\n",
    "n_a = 50\n",
    "a0 = np.random.randn(n_a, 1) * 0.2\n",
    "i0 = 1 # first character is ix_to_char[i0]\n",
    "Wax = np.random.randn(n_a, vocab_size)\n",
    "Waa = np.random.randn(n_a, n_a)\n",
    "Wya = np.random.randn(vocab_size, n_a)\n",
    "b = np.random.randn(n_a, 1)\n",
    "by = np.random.randn(vocab_size, 1)\n",
    "parameters = {\"Wax\": Wax, \"Waa\": Waa, \"Wya\": Wya, \"b\": b, \"by\": by}\n",
    "indexes = sample(parameters, char_to_ix, 0)\n",
    "\n",
    "# # generating test cases for optimize function\n",
    "vocab_size = 27\n",
    "n_a = 50 \n",
    "a_prev = np.random.randn(n_a, 1) * 0.2\n",
    "Wax = np.random.randn(n_a, vocab_size) * 0.4\n",
    "Waa = np.random.randn(n_a, n_a)\n",
    "Wya = np.random.randn(vocab_size, n_a)\n",
    "b = np.random.randn(n_a, 1)\n",
    "by = np.random.randn(vocab_size, 1)\n",
    "parameters2 = {\"Wax\": Wax, \"Waa\": Waa, \"Wya\": Wya, \"b\": b, \"by\": by}\n",
    "parameters3 = copy.deepcopy(parameters2)\n",
    "X = [12,3,5,11,22,3]\n",
    "Y = [4,14,11,22,25, 26]\n",
    "loss, g, a_last = optimize(X, Y, a_prev, parameters2, learning_rate = 0.01)\n",
    "\n",
    "# generating the model. Killing the print statements.\n",
    "with stdout_redirector.stdout_redirected():\n",
    "\t# generating the model\n",
    "\twith open(\"dinos.txt\") as f:\n",
    "\t\texamples = f.readlines()\n",
    "\t\tnp.random.seed(0)\n",
    "\t\tnp.random.shuffle(examples)\n",
    "\t\ta = model(examples, ix_to_char, char_to_ix, 200)\n",
    "\n",
    "def generateTestCases():\n",
    "\ttestCases = {\n",
    "\t    'clip': { \n",
    "\t        'partId': 'sYLqC',\n",
    "\t        'testCases': [\n",
    "\t            {\n",
    "\t                'testInput': (gradients1, 10),\n",
    "\t                'testOutput': gradients\n",
    "\t            }\n",
    "\t        ]\n",
    "\t    },\n",
    "\t    'sample': { \n",
    "\t        'partId': 'QxiNo',\n",
    "\t        'testCases': [\n",
    "\t            {\n",
    "\t                'testInput': (parameters, char_to_ix, 0),\n",
    "\t                'testOutput': indexes\n",
    "\t            }\n",
    "\t        ]\n",
    "\t    },\n",
    "\t    'optimize': { \n",
    "\t        'partId': 'x2pxm',\n",
    "\t        'testCases': [\n",
    "\t            {\n",
    "\t                'testInput': (X, Y, a_prev, parameters3),\n",
    "\t                'testOutput': (loss, g, a_last)\n",
    "\t            }\n",
    "\t        ]\n",
    "\t    },\n",
    "\t    'model': { \n",
    "\t        'partId': 'mJTOb',\n",
    "\t        'testCases': [\n",
    "\t            {\n",
    "\t                'testInput': (examples, ix_to_char, char_to_ix, 200),\n",
    "\t                'testOutput': a\n",
    "\t            }\n",
    "\t        ]\n",
    "\t    }\n",
    "\t}\n",
    "\treturn testCases\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
