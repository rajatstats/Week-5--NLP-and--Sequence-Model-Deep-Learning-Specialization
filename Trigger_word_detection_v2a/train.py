{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77110af0-d69c-4096-ac79-ccbe88110fed",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from pydub import AudioSegment\n",
    "import random\n",
    "import sys\n",
    "import io\n",
    "import os\n",
    "import glob\n",
    "import IPython\n",
    "from td_utils import *\n",
    "\n",
    "from tensorflow.keras.callbacks import ModelCheckpoint\n",
    "from tensorflow.keras.models import Model, load_model, Sequential\n",
    "from tensorflow.keras.layers import Dense, Activation, Dropout, Input, Masking, TimeDistributed, LSTM, Conv1D\n",
    "from tensorflow.keras.layers import GRU, Bidirectional, BatchNormalization, Reshape\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "\n",
    "Tx = 5511 # The number of time steps input to the model from the spectrogram\n",
    "n_freq = 101 # Number of frequencies input to the model at each time step of the spectrogram\n",
    "\n",
    "Ty = 1375 # The number of time steps in the output of our model\n",
    "\n",
    "X = np.load(\"./XY_train/X0.npy\")\n",
    "Y = np.load(\"./XY_train/Y0.npy\")\n",
    "\n",
    "X = np.concatenate((X, np.load(\"./XY_train/X1.npy\")), axis=0)\n",
    "Y = np.concatenate((Y, np.load(\"./XY_train/Y1.npy\")), axis=0)\n",
    "\n",
    "Y = np.swapaxes(Y, 1, 2)\n",
    "\n",
    "# Load preprocessed dev set examples\n",
    "X_dev = np.load(\"./XY_dev/X_dev.npy\")\n",
    "Y_dev = np.load(\"./XY_dev/Y_dev.npy\")\n",
    "\n",
    "# GRADED FUNCTION: model\n",
    "\n",
    "def modelf(input_shape):\n",
    "    \"\"\"\n",
    "    Function creating the model's graph in Keras.\n",
    "    \n",
    "    Argument:\n",
    "    input_shape -- shape of the model's input data (using Keras conventions)\n",
    "\n",
    "    Returns:\n",
    "    model -- Keras model instance\n",
    "    \"\"\"\n",
    "    \n",
    "    X_input = Input(shape = input_shape)\n",
    "    \n",
    "    ### START CODE HERE ###\n",
    "    \n",
    "    # Step 1: CONV layer (≈4 lines)\n",
    "    X = Conv1D(196, kernel_size = 15, strides = 4)(X_input)  # CONV1D\n",
    "    X = BatchNormalization()(X)                              # Batch normalization\n",
    "    X = Activation(\"relu\")(X)                                # ReLu activation\n",
    "    X = Dropout(0.8)(X)                                      # dropout (use 0.8)\n",
    "\n",
    "    # Step 2: First GRU Layer (≈4 lines)\n",
    "    X = GRU(units = 128, return_sequences = True)(X)         # GRU (use 128 units and return the sequences)\n",
    "    X = Dropout(0.8)(X)                                      # dropout (use 0.8)\n",
    "    X = BatchNormalization()(X)                              # Batch normalization\n",
    "    \n",
    "    # Step 3: Second GRU Layer (≈4 lines)\n",
    "    X = GRU(units = 128, return_sequences = True)(X)         # GRU (use 128 units and return the sequences)\n",
    "    X = Dropout(0.8)(X)                                      # dropout (use 0.8)\n",
    "    X = BatchNormalization()(X)                              # Batch normalization\n",
    "    X = Dropout(0.8)(X)                                      # dropout (use 0.8)\n",
    "    \n",
    "    # Step 4: Time-distributed dense layer (≈1 line)\n",
    "    X = TimeDistributed(Dense(1, activation = \"sigmoid\"))(X) # time distributed  (sigmoid)\n",
    "\n",
    "    ### END CODE HERE ###\n",
    "\n",
    "    model = Model(inputs = X_input, outputs = X)\n",
    "    \n",
    "    return model  \n",
    "\n",
    "model = modelf(input_shape = (Tx, n_freq))\n",
    "model.summary()\n",
    "\n",
    "opt = Adam(lr=0.001, beta_1=0.9, beta_2=0.999, decay=0.01)\n",
    "model.compile(loss='binary_crossentropy', optimizer=opt, metrics=[\"accuracy\"])\n",
    "\n",
    "\n",
    "model.fit(X, Y, batch_size=20, epochs=100)\n",
    "\n",
    "loss, acc = model.evaluate(X_dev, Y_dev)\n",
    "print(\"Dev set accuracy = \", acc)\n",
    "\n",
    "from tensorflow.keras.models import model_from_json\n",
    "\n",
    "json_file = open('./models/model_new3.json', 'r')\n",
    "loaded_model_json = json_file.read()\n",
    "json_file.close()\n",
    "model = model_from_json(loaded_model_json)\n",
    "model.load_weights('./models/model_new3.h5')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
